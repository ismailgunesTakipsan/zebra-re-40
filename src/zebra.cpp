#include "Zebra.h"


byte response_control[11]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x03, 0x08, 0x09, 0x00, 0x50,0xD9};


void Response(void);

char EPC_Datas[16];

int Crc_flag;
int Rx_buffer_counter;
int received_card_data_counter;
int Length_of_following_data=0;
int Calculated_crc16=0;
int Received_crc16=0;

byte crc_msg[2];
byte Rx_buffer[50];
byte EPC_data_buffer[16];
byte sof_msg[]={0xAA, 0xAB};
byte received_card_data[100];



uint8_t Delay_time=10;
uint8_t EPC_data_length=0;
uint8_t Payload_length=0;

uint16_t value;
uint16_t CRC_1;
uint16_t CRC_2;


void Set_Select_Filter_16 (byte *epc)
{
  byte msg[31];

  msg[0]={0x08};
  msg[1]={0x01};
  msg[2]={0x00};
  msg[3]={0x1B};
  msg[4]={0x01};

  for (size_t i = 0; i < 32; i++)
  {
    msg[5]=i+1;
    if (i==0) msg[6]=1;    
    else      msg[6]=0;
    msg[7]  ={0x00};
    msg[8]  ={0x00};
    msg[9]  ={0x01};
    msg[10] ={0x00};
    msg[11] ={0x20};
    msg[12] ={0x80};
    for (int i = 0; i < 16; i++)
    {
      msg[i+13]=(epc[i]);
    }
    msg[29] =00;
    msg[30] =00;
    value=CRC16_CalculateBuf(msg,sizeof(msg));

    CRC_1=value>>8;
    CRC_2=value<<8;
    CRC_2=CRC_2>>8;
    crc_msg[0]=CRC_1;
    crc_msg[1]=CRC_2;

#ifdef Debug
    for (size_t i = 0; i < sizeof(sof_msg); i++)
    {
      Serial.print(sof_msg[i],HEX);
      Serial.print(" ");
    }
    for (size_t i = 0; i < sizeof(msg); i++)
    {
      Serial.print(msg[i],HEX);
      Serial.print(" ");
    }
    for (size_t i = 0; i < sizeof(crc_msg); i++)
    {
      Serial.print(crc_msg[i],HEX);
      Serial.print(" ");
    }
    Serial.println();
#endif

    Serial2.write(sof_msg, sizeof(sof_msg));
    Serial2.write(msg, sizeof(msg));
    Serial2.write(crc_msg, sizeof(crc_msg));
    delay(Delay_time);
  }
}

void Set_Select_Filter_12 (byte *epc)
{
  byte msg[27];

  msg[0]={0x08};
  msg[1]={0x01};
  msg[2]={0x00};
  msg[3]={0x17};
  msg[4]={0x01};

  for (size_t i = 0; i < 32; i++)
  {
    msg[5]=i+1;
    if (i==0) msg[6]=1;    
    else      msg[6]=0;
    msg[7]  ={0x00};
    msg[8]  ={0x00};
    msg[9]  ={0x01};
    msg[10] ={0x00};
    msg[11] ={0x20};
    msg[12] ={0x60};
    for (int i = 0; i < 12; i++)
    {
      msg[i+13]=(epc[i]);
    }
    msg[25] =00;
    msg[26] =00;
    value=CRC16_CalculateBuf(msg,sizeof(msg));

    CRC_1=value>>8;
    CRC_2=value<<8;
    CRC_2=CRC_2>>8;
    crc_msg[0]=CRC_1;
    crc_msg[1]=CRC_2;

#ifdef Debug

    for (size_t i = 0; i < sizeof(sof_msg); i++)
    {
      Serial.print(sof_msg[i],HEX);
      Serial.print(" ");
    }
    for (size_t i = 0; i < sizeof(msg); i++)
    {
      Serial.print(msg[i],HEX);
      Serial.print(" ");
    }
    for (size_t i = 0; i < sizeof(crc_msg); i++)
    {
      Serial.print(crc_msg[i],HEX);
      Serial.print(" ");
    }
    Serial.println();
#endif

    Serial2.write(sof_msg, sizeof(sof_msg));
    Serial2.write(msg, sizeof(msg));
    Serial2.write(crc_msg, sizeof(crc_msg));
    delay(Delay_time);
  }
}

void Set_Selected_Epc_16 (byte *epc)
{
  byte msg_a[49];
  msg_a[0] ={0x08};
  msg_a[1] ={0x01};
  msg_a[2] ={0x00};
  msg_a[3] ={0x2D};
  msg_a[4] ={0x03};
  msg_a[5] ={0x81};
  msg_a[6] ={0x01};
  msg_a[7] ={0x01};
  msg_a[8] ={0x00};
  msg_a[9] ={0x02}; 
  msg_a[10]={0x08};
  for (size_t j = 0; j < 16; j++)
  {
    msg_a[j+11]={0xFF};
  }
  for (size_t k = 0; k < 16; k++)
  {
    msg_a[k+27]=(epc[k]);
  }
  
  msg_a[43]={0x01};
  msg_a[44]={0x00};
  msg_a[45]={0x00};
  msg_a[46]={0x00}; 
  msg_a[47]={0x00}; 
  msg_a[48]={0x00};

  value=CRC16_CalculateBuf(msg_a,sizeof(msg_a));
  CRC_1=value>>8;
  CRC_2=value<<8;
  CRC_2=CRC_2>>8;
  crc_msg[0]=CRC_1;
  crc_msg[1]=CRC_2;

  Serial2.write(sof_msg, sizeof(sof_msg));
  Serial2.write(msg_a, sizeof(msg_a));
  Serial2.write(crc_msg, sizeof(crc_msg));
  delay(Delay_time);

#ifdef Debug
  for (size_t i = 0; i < sizeof(sof_msg); i++)
  {
    Serial.print(sof_msg[i],HEX);
    Serial.print(" ");
  }
  for (size_t i = 0; i < sizeof(msg_a); i++)
  {
    Serial.print(msg_a[i],HEX);
    Serial.print(" ");
  }
  for (size_t i = 0; i < sizeof(crc_msg); i++)
  {
    Serial.print(crc_msg[i],HEX);
    Serial.print(" ");
  }
  Serial.println();
#endif
}

void Set_Selected_Epc_12 (byte *epc)
{
  byte msg_a[41];
  msg_a[0]={0x08};
  msg_a[1]={0x01};
  msg_a[2]={0x00};
  msg_a[3]={0x25};
  msg_a[4]={0x03};
  msg_a[5]={0x81};
  msg_a[6]={0x01};
  msg_a[7]={0x01};
  msg_a[8]={0x00};
  msg_a[9]={0x02}; 
  msg_a[10]={0x06};
  for (size_t j = 0; j < 12; j++)
  {
    msg_a[j+11]={0xFF};
  }
  for (size_t k = 0; k < 12; k++)
  {
    msg_a[k+23]=(epc[k]);
  }
  
  msg_a[35]={0x01};
  msg_a[36]={0x00};
  msg_a[37]={0x00};
  msg_a[38]={0x00}; 
  msg_a[39]={0x00}; 
  msg_a[40]={0x00};

  value=CRC16_CalculateBuf(msg_a,sizeof(msg_a));
  CRC_1=value>>8;
  CRC_2=value<<8;
  CRC_2=CRC_2>>8;
  crc_msg[0]=CRC_1;
  crc_msg[1]=CRC_2;

  Serial2.write(sof_msg, sizeof(sof_msg));
  Serial2.write(msg_a, sizeof(msg_a));
  Serial2.write(crc_msg, sizeof(crc_msg));
  delay(Delay_time);

#ifdef Debug
  for (size_t i = 0; i < sizeof(sof_msg); i++)
  {
    Serial.print(sof_msg[i],HEX);
    Serial.print(" ");
  }
  for (size_t i = 0; i < sizeof(msg_a); i++)
  {
    Serial.print(msg_a[i],HEX);
    Serial.print(" ");
  }
  for (size_t i = 0; i < sizeof(crc_msg); i++)
  {
    Serial.print(crc_msg[i],HEX);
    Serial.print(" ");
  }
  Serial.println();
#endif
}

static const uint16_t CRCtable[ 256 ] = {
0x0000 ,0x1021 ,0x2042 ,0x3063 ,0x4084 ,0x50A5 ,0x60C6 ,0x70E7 ,0x8108 ,0x9129 ,0xA14A ,0xB16B ,0xC18C ,0xD1AD ,0xE1CE ,0xF1EF,
0x1231 ,0x0210 ,0x3273 ,0x2252 ,0x52B5 ,0x4294 ,0x72F7 ,0x62D6 ,0x9339 ,0x8318 ,0xB37B ,0xA35A ,0xD3BD ,0xC39C ,0xF3FF ,0xE3DE,
0x2462 ,0x3443 ,0x0420 ,0x1401 ,0x64E6 ,0x74C7 ,0x44A4 ,0x5485 ,0xA56A ,0xB54B ,0x8528 ,0x9509 ,0xE5EE ,0xF5CF ,0xC5AC ,0xD58D,
0x3653 ,0x2672 ,0x1611 ,0x0630 ,0x76D7 ,0x66F6 ,0x5695 ,0x46B4 ,0xB75B ,0xA77A ,0x9719 ,0x8738 ,0xF7DF ,0xE7FE ,0xD79D ,0xC7BC,
0x48C4 ,0x58E5 ,0x6886 ,0x78A7 ,0x0840 ,0x1861 ,0x2802 ,0x3823 ,0xC9CC ,0xD9ED ,0xE98E ,0xF9AF ,0x8948 ,0x9969 ,0xA90A ,0xB92B,
0x5AF5 ,0x4AD4 ,0x7AB7 ,0x6A96 ,0x1A71 ,0x0A50 ,0x3A33 ,0x2A12 ,0xDBFD ,0xCBDC ,0xFBBF ,0xEB9E ,0x9B79 ,0x8B58 ,0xBB3B ,0xAB1A,
0x6CA6 ,0x7C87 ,0x4CE4 ,0x5CC5 ,0x2C22 ,0x3C03 ,0x0C60 ,0x1C41 ,0xEDAE ,0xFD8F ,0xCDEC ,0xDDCD ,0xAD2A ,0xBD0B ,0x8D68 ,0x9D49,
0x7E97 ,0x6EB6 ,0x5ED5 ,0x4EF4 ,0x3E13 ,0x2E32 ,0x1E51 ,0x0E70 ,0xFF9F ,0xEFBE ,0xDFDD ,0xCFFC ,0xBF1B ,0xAF3A ,0x9F59 ,0x8F78,
0x9188 ,0x81A9 ,0xB1CA ,0xA1EB ,0xD10C ,0xC12D ,0xF14E ,0xE16F ,0x1080 ,0x00A1 ,0x30C2 ,0x20E3 ,0x5004 ,0x4025 ,0x7046 ,0x6067,
0x83B9 ,0x9398 ,0xA3FB ,0xB3DA ,0xC33D ,0xD31C ,0xE37F ,0xF35E ,0x02B1 ,0x1290 ,0x22F3 ,0x32D2 ,0x4235 ,0x5214 ,0x6277 ,0x7256,
0xB5EA ,0xA5CB ,0x95A8 ,0x8589 ,0xF56E ,0xE54F ,0xD52C ,0xC50D ,0x34E2 ,0x24C3 ,0x14A0 ,0x0481 ,0x7466 ,0x6447 ,0x5424 ,0x4405,
0xA7DB ,0xB7FA ,0x8799 ,0x97B8 ,0xE75F ,0xF77E ,0xC71D ,0xD73C ,0x26D3 ,0x36F2 ,0x0691 ,0x16B0 ,0x6657 ,0x7676 ,0x4615 ,0x5634,
0xD94C ,0xC96D ,0xF90E ,0xE92F ,0x99C8 ,0x89E9 ,0xB98A ,0xA9AB ,0x5844 ,0x4865 ,0x7806 ,0x6827 ,0x18C0 ,0x08E1 ,0x3882 ,0x28A3,
0xCB7D ,0xDB5C ,0xEB3F ,0xFB1E ,0x8BF9 ,0x9BD8 ,0xABBB ,0xBB9A ,0x4A75 ,0x5A54 ,0x6A37 ,0x7A16 ,0x0AF1 ,0x1AD0 ,0x2AB3 ,0x3A92,
0xFD2E ,0xED0F ,0xDD6C ,0xCD4D ,0xBDAA ,0xAD8B ,0x9DE8 ,0x8DC9 ,0x7C26 ,0x6C07 ,0x5C64 ,0x4C45 ,0x3CA2 ,0x2C83 ,0x1CE0 ,0x0CC1,
0xEF1F ,0xFF3E ,0xCF5D ,0xDF7C ,0xAF9B ,0xBFBA ,0x8FD9 ,0x9FF8 ,0x6E17 ,0x7E36 ,0x4E55 ,0x5E74 ,0x2E93 ,0x3EB2 ,0x0ED1 ,0x1EF0 };

/******Function name:CRC16_CalateByte() *********************
 *
 *   Function description:
 *       This function is the calculation function of CRC16 of the system, which performs CRC calculation
 *       on the given CRC value and the data to be calculated and assigns the calculation result to the previously given CRC value.
 *      calculation formula£º
 *       	 CRC_16= x^16 + x^15 + x^2 + 1
 *
 *   invocation arguments:	
 *       CRC_byte       The data to be calculated
 *    	 last_CRC_value The CRC value calculated last time
 *  return value: 		
 *       Function newly computed CRC value
 *   function code:
 */

uint16_t CRC16_CalateByte(uint8_t CheckByte, uint16_t LastCRC )
{  
  return ( LastCRC << 8 ) ^ CRCtable [ ( LastCRC >>8 ) ^ CheckByte ];
}

/******function name:CRC16_CalculateBuf() *********************
 *
 *   function description:
 *       This function is the CRC16 calculation function of the system, which calculates the check value
 *       of CRC_16 of the specified address and number of data.
 *       Calculation formula£º
 *       	 CRC_16= x^16 + x^15 + x^2 + 1
 *
 *   invocation arguments:	
 *       ptr  The starting address of the calculated data
     	 len  The length of the calculated data
 *   return value: 		
 *       Function computed CRC value
 *   function code:
 */

uint16_t CRC16_CalculateBuf(uint8_t *ptr, uint16_t len)
{
  uint16_t crc_result = 0xFFFF;	

  while(len--)
  {
      crc_result = CRC16_CalateByte(*ptr, crc_result );
      ptr++;
  }

  return crc_result^= 0xffff;
}

uint8_t Crc_check( uint8_t *ptr)
{
  uint8_t Crc_ok;
  Length_of_following_data=ptr[5];    // The length of the following data, does not include checksum
  byte crc_buffer[Length_of_following_data+4];

  for ( uint8_t i=0; i<(sizeof(crc_buffer));  i++)
  {
      crc_buffer[i]=ptr[i+2];
  }

    Calculated_crc16=CRC16_CalculateBuf( crc_buffer, Length_of_following_data+4 );
    Received_crc16= (ptr[6+Length_of_following_data]<<8)+ptr[7+Length_of_following_data];         //RECEİVED CRC16: Length_of_following_datasi bilinen datanin crc hexleri alinir
    if(
      (Received_crc16==Calculated_crc16)
      &&
      (Received_crc16!=0))
    {
      Crc_ok=1;
      //Serial.println("CRC_OK=1");
      received_card_data_counter=0;
    }
    else
    {
      Crc_ok=0;
      //Serial.println("CRC_OK=0");
    }

    //Serial.println(Received_crc16);
    //Serial.println(Calculated_crc16);
    return Crc_ok;
}

bool Receive_And_Check_Arrays(byte *data, uint8_t size)
{
  bool flag=0;
  uint8_t flag_cnt=0;
  //delay(10);
  Rx_buffer_counter=0;
  memset(Rx_buffer, 0, sizeof(Rx_buffer));

  //Serial.println("Receive_And_Check_Arrays");
  while (Serial2.available()>0)
  { 
    
    Rx_buffer[Rx_buffer_counter]= Serial2.read();     // gelen hexler arraya yazılır
    //Serial.print(Rx_buffer[Rx_buffer_counter],HEX);
    //Serial.print(" ");


    if( (Rx_buffer[Rx_buffer_counter]) == (data[Rx_buffer_counter]) )
    {
      flag_cnt++;
    }
    if( (Rx_buffer_counter == (size-1) ) || (Rx_buffer[0]!=0xAA ) )
    { 
      //Serial.println("break; ");
      break;
    }
    Rx_buffer_counter++; 
  }

  if (  (flag_cnt==size)   &&    (flag_cnt>0)  ) 
  {
    flag=1;
  }

  return flag;    
}

bool Advanced_Settings(uint8_t Session, uint8_t Flag, uint8_t SL ,uint8_t Q)
{

  //Response();

  /*
  SL Asserted 3   msg[8]
  SL Asserted 2
  Both        1

  Flag Parameter  msg[10]
  A           0
  B           1
  AB          2

  Session 0   0   msg[9]
  Session 1   1
  Session 2   2
  Session 3   3


  Q    Sets the number of slots in the round.   msg[11]
       The possible values of Q are 0-15.
  */
  bool flag=0;

  if ( (Session>3) || (Flag>2) ||  (SL==0) ||  (SL>3) || (Q>15) )
  {  
    Serial.print("Wrong Value");
    return flag;
  }
  else
  {
    byte msg[]={0x08 ,0x01 ,0x00 ,0x08 ,0x02 ,0x01 ,0x01 ,0x01 ,0x01 ,0x00 ,0x02 ,0x06};
    bool flag=0;
    uint16_t Pow_1;
    uint16_t Pow_2;

    msg[8]= SL;
    msg[9]= Session;
    msg[10]=Flag;
    msg[11]=Q,HEX;

    value=CRC16_CalculateBuf(msg,12);
    CRC_1=value>>8;
    CRC_2=value<<8;
    CRC_2=CRC_2>>8;
    crc_msg[0]=CRC_1;
    crc_msg[1]=CRC_2;

    //Serial.println(CRC_1,HEX);
    //Serial.println(CRC_2,HEX);

    Serial2.write(sof_msg, sizeof(sof_msg));
    Serial2.write(msg, sizeof(msg));
    Serial2.write(crc_msg, sizeof(crc_msg));

  #if 0
    for ( int i=0; i<12; i++)
    {
      Serial.print(msg[i],HEX);  
      Serial.print(" ");
    }
      Serial.println();
  #endif

    byte Receive_msg[]={ 0xAA, 0xAB, 0x08, 0x01, 0x00, 0x03, 0x08, 0x01, 0x00, 0xD9, 0x70};  //Receive： AA AB 8 1 0 3 8 1 0 D9 70

    if(Receive_And_Check_Arrays( Receive_msg, sizeof(Receive_msg)))
    {
      flag=1;
      //Serial.println("OK");
    }

    return flag;
 }
}

void Analyse_epc(void)
{
  
    Crc_flag=Crc_check( received_card_data );
   
    if(Crc_flag)
    {
      Crc_flag=0;
     //reading_counter++;
     // Serial.println(); 
     // Serial.print("reading_counter=");
     // Serial.println(reading_counter);
#if 0
      Serial.println();
      for ( int i=0; i<(Length_of_following_data+7); i++)
      {
        Serial.print(received_card_data[i],HEX);
      //   Serial.print(received_card_data[i]);
          Serial.print(" ");
      }
      Serial.println();
#endif

      if (Payload_length==42)
      {
        EPC_data_length=16;
        for ( int i=12; i<28; i++)
        { 
          EPC_data_buffer[i-12]=received_card_data[i];
        }
      }
      else if (Payload_length==33)
      {
        EPC_data_length=12;
        for ( int i=7; i<19; i++)
        {
          EPC_data_buffer[i-7]=received_card_data[i];
        }
    
      }

      memcpy( EPC_Datas, EPC_data_buffer, EPC_data_length);
        

      uint8_t Epcs[EPC_data_length*2];

      for (size_t y = 0; y < EPC_data_length; y++)
      {
        uint8_t d1;
        uint8_t d2;
        d2=EPC_Datas[y]>>4; 
        d1=EPC_Datas[y]<<4;
        d1=d1>>4;
        Epcs[2*y]=d2;
        Epcs[2*y+1]=d1;
      }

      Serial.print("EPC= ");
      for (size_t y = 0; y < (EPC_data_length*2); y++)
      {
        Serial.print(Epcs[y],HEX);
      }
      Serial.println();


    }

   
      memset( EPC_Datas, 0,(sizeof(EPC_data_buffer)) );
      received_card_data_counter=0;
      memset(received_card_data, 0, sizeof(received_card_data));
  
}

void Response(void)
{

  while (Serial2.available()>0)
  {           
    received_card_data[received_card_data_counter]= Serial2.read();     // gelen hexler arraya yazılır
    //Serial.print(received_card_data[received_card_data_counter],HEX);
    //Serial.print(" ");
    received_card_data_counter++;
    
    if (received_card_data[0]!=sof_msg[0])    // AA
      //  ||
    //   (received_card_data[1]!=protocol_control[1])    // AB
    {
      received_card_data_counter=0;
      memset(received_card_data, 0, sizeof(received_card_data));
    }

    else
    {

      if(received_card_data_counter==7)
      {
        Payload_length= received_card_data[5];
        
        //Serial.println();
        //Serial.print("Payload_length ");
        //Serial.println(Payload_length,HEX);

      }
      if(Payload_length > 12)
      {
        if ((Payload_length+8)==received_card_data_counter)
        {
          for (size_t i = 0; i < received_card_data_counter; i++)
          {
            Serial.print(received_card_data[i],HEX);
            Serial.print(" ");
          }
          Serial.println();
          Analyse_epc();
          received_card_data_counter=0;
          memset(received_card_data, 0, sizeof(received_card_data));
        }
      }
      else if(Payload_length==3) 
      {
        if( received_card_data[0]==response_control[0] &&
            received_card_data[1]==response_control[1] &&
            received_card_data[2]==response_control[2] &&
            received_card_data[3]==response_control[3] &&
            received_card_data[4]==response_control[4] &&
            received_card_data[5]==response_control[5] &&
            received_card_data[6]==response_control[6] &&
            received_card_data[7]==response_control[7] &&
            received_card_data[8]==response_control[8] &&
            received_card_data[9]==response_control[9] &&
            received_card_data[10]==response_control[10] &&
            received_card_data[11]==response_control[11] )
            {
              Start_Reading(10,0,2,1,5);
              Serial.print("burda");
            }
      }

   
    }
      
    if( received_card_data_counter>100 )
    {
      received_card_data_counter=0;
      memset(received_card_data, 0, sizeof(received_card_data));
    }

  }

}

void Start_Reader(void)
{
  bool flag=0;
  byte _msg[]={ 0xAA, 0xAB, 0x08, 0x08, 0x00, 0x00, 0x57, 0x5D};
  delay(Delay_time);
  Serial2.write(_msg, sizeof(_msg));
  byte Receive_msg[]={ 0xAA, 0xAB, 0x08, 0x01, 0x00, 0x03, 0x08, 0x08, 0x00, 0x63, 0xE8 };  //Receive： AA AB 8 1 0 3 8 8 0 63 E8
  if(Receive_And_Check_Arrays( Receive_msg, sizeof(Receive_msg)))
  {
    flag=1;
  }

  byte _msg_1[]={0xaa ,0xab ,0x08 ,0x08 ,0x00 ,0x00 ,0x57 ,0x5d};
  delay(Delay_time);
  Serial2.write(_msg_1, sizeof(_msg_1));
  byte Receive_msg_1[]={ 0xAA, 0xAB, 0x08, 0x01, 0x00 ,0x03, 0x08, 0x02, 0x00, 0x8C, 0x23 };  //Receive： AA AB 8 1 0 3 8 2 0 8C 23
  if(Receive_And_Check_Arrays( Receive_msg_1, sizeof(Receive_msg_1)))
  {
    flag=1;
  }

  byte _msg_2[]={0xaa ,0xab ,0x08 ,0x08 ,0x00 ,0x00 ,0x57 ,0x5d };
  delay(Delay_time);
  Serial2.write(_msg_2, sizeof(_msg_2));
  byte Receive_msg_2[]={ 0xAA, 0xAB, 0x08, 0x01, 0x00 ,0x03, 0x08, 0x02, 0x00, 0x8C, 0x23 };  //Receive： AA AB 8 1 0 3 8 2 0 8C 23
  if(Receive_And_Check_Arrays( Receive_msg_2, sizeof(Receive_msg_2)))
  {
    flag=1;
  }

  byte _msg_4[]={0xaa, 0xab, 0x08, 0x01, 0x00, 0x1b, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00 ,0x00 ,0x00 , 0x00 ,0x00 ,0x00, 
                0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00, 0x00, 0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x62 ,0xa3};
  delay(Delay_time);
  Serial2.write(_msg_4, sizeof(_msg_4));
  byte Receive_msg_4[]={ 0xAA, 0xAB, 0x08, 0x11, 0x00, 0x06, 0x00, 0x01, 0x03, 0x00, 0x0D, 0x00, 0x0A, 0xA4 };
  if(Receive_And_Check_Arrays( Receive_msg_4, sizeof(Receive_msg_4)))
  {
    flag=1;
  }

  byte _msg_5[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x04 ,0x02 ,0x00 ,0x00 ,0x00 ,0x0c , 0x14 };
  delay(Delay_time);
  Serial2.write(_msg_5, sizeof(_msg_5));
  byte Receive_msg_5[]={ 0xAA, 0xAB, 0x08, 0x01, 0x00 ,0x03, 0x08, 0x02, 0x00, 0x8C, 0x23 };  //Receive： AA AB 8 1 0 3 8 2 0 8C 23
  if(Receive_And_Check_Arrays( Receive_msg_5, sizeof(Receive_msg_5)))
  {
    flag=1;
  }

  byte _msg_6[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x05 ,0x00 ,0x04 ,0x00 ,0x00 ,0x00 ,0x00 ,0x51 };
  delay(Delay_time);
  Serial2.write(_msg_6, sizeof(_msg_6));
  byte Receive_msg_6[]={ 0xAA, 0xAB, 0x08, 0x01, 0x00, 0x03, 0x08, 0x01, 0x00, 0xD9, 0x70};  //Receive： AA AB 8 1 0 3 8 1 0 D9 70
  if(Receive_And_Check_Arrays( Receive_msg_6, sizeof(Receive_msg_6)))
  {
    flag=1;
  }

  byte _msg_7[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x05 ,0x00 ,0x04 ,0x01 ,0x00 ,0x06 ,0x57 ,0xa7 };
  delay(Delay_time);
  Serial2.write(_msg_7, sizeof(_msg_7));
  byte Receive_msg_7[]={ 0xAA, 0xAB, 0x08, 0x01, 0x00, 0x03, 0x08, 0x01, 0x00, 0xD9, 0x70};  //Receive： AA AB 8 1 0 3 8 1 0 D9 70
  if(Receive_And_Check_Arrays( Receive_msg_7, sizeof(Receive_msg_7)))
  {
    flag=1;
  }

  byte _msg_8[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x08 ,0x02 ,0x01 ,0x01 ,0x01 ,0x00 ,0x00 ,0x00 ,0x00 ,0x49 ,0x2e };
  delay(Delay_time);
  Serial2.write(_msg_8, sizeof(_msg_8));
  byte Receive_msg_8[]={ 0xAA, 0xAB, 0x08, 0x01, 0x00, 0x03, 0x08, 0x01, 0x00, 0xD9, 0x70};  //Receive： AA AB 8 1 0 3 8 1 0 D9 70
  if(Receive_And_Check_Arrays( Receive_msg_8, sizeof(Receive_msg_8)))
  {
    flag=1;
  }

  byte _msg_9[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x1b ,0x04 ,0x01 ,0x01 ,0x00 ,0x01 ,0x00 ,0x01 ,0x01 ,0x00 ,0x01 ,0x01 ,0x0e ,0x00 ,0x00 ,0x00 , 0x00 ,0x01 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x03 ,0x28 ,0x17 ,0xa5};
  delay(Delay_time);
  Serial2.write(_msg_9, sizeof(_msg_9));
  byte Receive_msg_9[]={ 0xAA, 0xAB, 0x08, 0x01, 0x00, 0x03, 0x08, 0x01, 0x00, 0xD9, 0x70};  //Receive： AA AB 8 1 0 3 8 1 0 D9 70
  if(Receive_And_Check_Arrays( Receive_msg_9, sizeof(Receive_msg_9)))
  {
    flag=1;
  }

  byte _msg_10[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x07 ,0xd0 ,0x03 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0xae ,0xad };
  delay(Delay_time);
  Serial2.write(_msg_10, sizeof(_msg_10));
  byte Receive_msg_10[]={ 0xAA, 0xAB, 0x08, 0x01, 0x00, 0x03, 0x08, 0x01, 0x00, 0xD9, 0x70};  //Receive： AA AB 8 1 0 3 8 1 0 D9 70
  if(Receive_And_Check_Arrays( Receive_msg_10, sizeof(Receive_msg_10)))
  {
    flag=1;
  }

  byte _msg_11[]={0xaa ,0xab ,0x08 , 0x01 ,0x00 ,0x0f ,0x00 ,0x05 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x01 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 , 0x00 ,0x00 ,0x94 ,0x9c };
  delay(Delay_time);
  Serial2.write(_msg_11, sizeof(_msg_11));
  byte Receive_msg_11[]={ 0xAA, 0xAB, 0x08, 0x01, 0x00, 0x03, 0x08, 0x01, 0x00, 0xD9, 0x70};  //Receive： AA AB 8 1 0 3 8 1 0 D9 70
  if(Receive_And_Check_Arrays( Receive_msg_11, sizeof(Receive_msg_11)))
  {
    flag=1;
  }

  byte _msg_12[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x05 ,0x10 ,0xfd ,0x00 ,0x00 ,0x00 ,0x68 , 0x31 };
  delay(Delay_time);
  Serial2.write(_msg_12, sizeof(_msg_12));
  byte Receive_msg_12[]={ 0xAA, 0xAB, 0x08, 0x01, 0x00, 0x03, 0x08, 0x01, 0x00, 0xD9, 0x70};  //Receive： AA AB 8 1 0 3 8 1 0 D9 70
  if(Receive_And_Check_Arrays( Receive_msg_12, sizeof(Receive_msg_12)))
  {
    flag=1;
  }

  byte _msg_13[]={0xaa ,0xab ,0x08 ,0x04 ,0x00 ,0x02 ,0x04 ,0x0c ,0x16 ,0x83 };
  delay(Delay_time);
  Serial2.write(_msg_13, sizeof(_msg_13));
  byte Receive_msg_13[]={ 0xAA, 0xAB, 0x08, 0x01, 0x00, 0x03, 0x08, 0x01, 0x00, 0xD9, 0x70};  //Receive： AA AB 8 1 0 3 8 1 0 D9 70
  if(Receive_And_Check_Arrays( Receive_msg_13, sizeof(Receive_msg_13)))
  {
    flag=1;
  }

  byte _msg_14[]={0xaa ,0xab ,0x08 ,0x03 ,0x00 , 0x04 ,0x04 ,0x00 ,0x00 ,0x02 ,0x6b ,0x2c };
  delay(Delay_time);
  Serial2.write(_msg_14, sizeof(_msg_14));
  byte Receive_msg_14[]={ 0xAA, 0xAB, 0x08, 0x01, 0x00, 0x03, 0x08, 0x01, 0x00, 0xD9, 0x70};  //Receive： AA AB 8 1 0 3 8 1 0 D9 70
  if(Receive_And_Check_Arrays( Receive_msg_14, sizeof(Receive_msg_14)))
  {
    flag=1;
  }

  byte _msg_15[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x03 ,0x08 ,0x85 ,0x00 , 0x0e ,0x2c };
  delay(Delay_time);
  Serial2.write(_msg_15, sizeof(_msg_15));
  byte Receive_msg_15[]={ 0xAA, 0xAB, 0x08, 0x11, 0x00, 0x06, 0x04, 0x0C, 0x0E, 0x20, 0x00, 0x00, 0xE4, 0x63 };
  if(Receive_And_Check_Arrays( Receive_msg_15, sizeof(Receive_msg_15)))
  {
    flag=1;
  }


  byte _msg_16[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x09 ,0x08 ,0x01 ,0x01 ,0x00 ,0x0d ,0x35 ,0xa4 ,0x01 , 0x0e ,0x2e ,0xea };
  delay(Delay_time);
  Serial2.write(_msg_16, sizeof(_msg_16));
  byte Receive_msg_16[]={ 0xAA, 0xAB, 0x08, 0x01, 0x00, 0x03, 0x08, 0x04, 0x00, 0x26, 0x85 };
  if(Receive_And_Check_Arrays( Receive_msg_16, sizeof(Receive_msg_16)))
  {
    flag=1;
  }

  byte _msg_17[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x09 ,0x08 ,0x02 ,0x01 ,0x00 ,0x0d ,0x37 ,0xfc , 0x01 ,0x0e ,0xfc ,0x98 };
  delay(Delay_time);
  Serial2.write(_msg_17, sizeof(_msg_17));
  byte Receive_msg_17[]={ 0xAA, 0xAB, 0x08, 0x01, 0x00, 0x03, 0x08, 0x03, 0x00, 0xBF, 0x12  };
  if(Receive_And_Check_Arrays( Receive_msg_17, sizeof(Receive_msg_17)))
  {
    flag=1;
  }

  byte _msg_18[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x09 ,0x08 ,0x03 ,0x01 ,0x00 ,0x0d ,0x3a , 0x54 ,0x01 ,0x0e ,0x96 ,0xf0 };
  delay(Delay_time);
  Serial2.write(_msg_18, sizeof(_msg_18));
  byte Receive_msg_18[]={ 0xAA, 0xAB, 0x08, 0x01, 0x00, 0x03, 0x08, 0x01, 0x00, 0xD9, 0x70};  //Receive： AA AB 8 1 0 3 8 1 0 D9 70
  if(Receive_And_Check_Arrays( Receive_msg_18, sizeof(Receive_msg_18)))
  {
    flag=1;
  }

  byte _msg_19[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x09 ,0x08 ,0x04 ,0x01 ,0x00 ,0x0d , 0x3c ,0xac ,0x01 ,0x0e ,0x3c ,0x82 };
  delay(Delay_time);
  Serial2.write(_msg_19, sizeof(_msg_19));
  if(Receive_And_Check_Arrays( Receive_msg_18, sizeof(Receive_msg_18)))
  {
    flag=1;
  }

  byte _msg_20[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x05 ,0x0f ,0x42  };
  delay(Delay_time);
  Serial2.write(_msg_20, sizeof(_msg_20));
  if(Receive_And_Check_Arrays( Receive_msg_18, sizeof(Receive_msg_18)))
  {
    flag=1;
  }
  byte _msg_21[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x06 ,0x3f ,0x21 };
  delay(Delay_time);
  Serial2.write(_msg_21, sizeof(_msg_21));
  if(Receive_And_Check_Arrays( Receive_msg_18, sizeof(Receive_msg_18)))
  {
    flag=1;
  }
  byte _msg_22[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 , 0x08 ,0x07 ,0x2f ,0x00 };
  delay(Delay_time);
  Serial2.write(_msg_22, sizeof(_msg_22));
  if(Receive_And_Check_Arrays( Receive_msg_18, sizeof(Receive_msg_18)))
  {
    flag=1;
  }
  byte _msg_23[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x08 ,0xde ,0xef };
  delay(Delay_time);
  Serial2.write(_msg_23, sizeof(_msg_23));
  byte Receive_msg_23[]={  0xAA, 0xAB, 0x08, 0x11, 0x00, 0x09, 0x08, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0AC, 0xC3};  //Receive： AA AB 8 11 0 9 8 5 0 0 0 0 0 0 0 AC C3
  if(Receive_And_Check_Arrays( Receive_msg_23, sizeof(Receive_msg_23)))
  {
    flag=1;
  }

  byte _msg_24[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x09 ,0xce ,0xce };
  delay(Delay_time);
  Serial2.write(_msg_24, sizeof(_msg_24));
  if(Receive_And_Check_Arrays( Receive_msg_5, sizeof(Receive_msg_5)))
  {
    flag=1;
  }

  byte _msg_25[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x0a , 0xfe ,0xad };
  delay(Delay_time);
  Serial2.write(_msg_25, sizeof(_msg_25));
  byte Receive_msg_25[]={0xAA, 0xAB, 0x08, 0x11, 0x00, 0x09, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0xB6 };  //Receive：	AA AB 08 11 00 09 08 06 00 00 00 00 00 00 00 64 B6 
  if(Receive_And_Check_Arrays( Receive_msg_25, sizeof(Receive_msg_25)))
  {
    flag=1;
  }

  byte _msg_26[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x0b ,0xee ,0x8c };
  delay(Delay_time);
  Serial2.write(_msg_26, sizeof(_msg_26));
  if(Receive_And_Check_Arrays( Receive_msg_5, sizeof(Receive_msg_5)))
  {
    flag=1;
    
  }

  byte _msg_27[]={0xaa ,0xab ,0x08 ,0x02 , 0x00 ,0x02 ,0x08 ,0x0c ,0x9e ,0x6b };
  delay(Delay_time);
  Serial2.write(_msg_27, sizeof(_msg_27));
  byte Receive_msg_27[]={0xAA, 0xAB, 0x08, 0x11, 0x00, 0x09, 0x08, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x65 };  //Receive	AA AB 08 11 00 09 08 07 00 00 00 00 00 00 00 23 65 
  if(Receive_And_Check_Arrays( Receive_msg_27, sizeof(Receive_msg_27)))
  {
    flag=1;
  }

  byte _msg_28[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x0d ,0x8e ,0x4a };
  delay(Delay_time);
  Serial2.write(_msg_28, sizeof(_msg_28));
  if(Receive_And_Check_Arrays( Receive_msg_5, sizeof(Receive_msg_5)))
  {
    flag=1;
  }

  byte _msg_29[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x0e ,0xbe ,0x29 };
  delay(Delay_time);
  Serial2.write(_msg_29, sizeof(_msg_29));
  byte _msg_30[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 , 0x08 ,0x0f ,0xae ,0x08 };
  delay(Delay_time);
  Serial2.write(_msg_30, sizeof(_msg_30));
  byte _msg_31[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x10 ,0x4d ,0xd6 };
  delay(Delay_time);
  Serial2.write(_msg_31, sizeof(_msg_31));
  byte _msg_32[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x11 ,0x5d ,0xf7 };
  delay(Delay_time);
  Serial2.write(_msg_32, sizeof(_msg_32));
  byte _msg_33[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x12 , 0x6d ,0x94};
  delay(Delay_time);
  Serial2.write(_msg_33, sizeof(_msg_33));
  byte _msg_34[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x13 ,0x7d ,0xb5};
  delay(Delay_time);
  Serial2.write(_msg_34, sizeof(_msg_34));
  byte _msg_35[]={0xaa ,0xab ,0x08 ,0x02 , 0x00 ,0x02 ,0x08 ,0x14 ,0x0d ,0x52};
  delay(Delay_time);
  Serial2.write(_msg_35, sizeof(_msg_35));
  byte _msg_36[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x15 ,0x1d ,0x73 };
  delay(Delay_time);
  Serial2.write(_msg_36, sizeof(_msg_36));
  byte _msg_37[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x16 ,0x2d ,0x10 };
  delay(Delay_time);
  Serial2.write(_msg_37, sizeof(_msg_37));
  byte _msg_38[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 , 0x08 ,0x17 ,0x3d ,0x31};
  delay(Delay_time);
  Serial2.write(_msg_38, sizeof(_msg_38));
  byte _msg_39[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x18 ,0xcc ,0xde };
  delay(Delay_time);
  Serial2.write(_msg_39, sizeof(_msg_39));
  byte _msg_40[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x19 ,0xdc ,0xff };
  delay(Delay_time);
  Serial2.write(_msg_40, sizeof(_msg_40));
  byte _msg_43[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x1a , 0xec ,0x9c };
  delay(Delay_time);
  Serial2.write(_msg_43, sizeof(_msg_43));
  byte _msg_44[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x1b ,0xfc ,0xbd };
  delay(Delay_time);
  Serial2.write(_msg_44, sizeof(_msg_44));
  byte _msg_45[]={0xaa ,0xab ,0x08 ,0x02 , 0x00 ,0x02 ,0x08 ,0x1c ,0x8c ,0x5a };
  delay(Delay_time);
  Serial2.write(_msg_45, sizeof(_msg_45));
  byte _msg_46[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x1d ,0x9c ,0x7b  };
  delay(Delay_time);
  Serial2.write(_msg_46, sizeof(_msg_46));
  byte _msg_49[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x1e ,0xac ,0x18 };
  delay(Delay_time);
  Serial2.write(_msg_49, sizeof(_msg_49));
  byte _msg_50[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 , 0x08 ,0x1f ,0xbc ,0x39 };
  delay(Delay_time);
  Serial2.write(_msg_50, sizeof(_msg_50));
  byte _msg_51[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x20 ,0x7b ,0x85 };
  delay(Delay_time);
  Serial2.write(_msg_51, sizeof(_msg_51));
  byte _msg_52[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x21 ,0x6b ,0xa4 };
  delay(Delay_time);
  Serial2.write(_msg_52, sizeof(_msg_52));
  byte _msg_53[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x22 , 0x5b ,0xc7 };
  delay(Delay_time);
  Serial2.write(_msg_53, sizeof(_msg_53));
  byte _msg_54[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x23 ,0x4b ,0xe6 };
  delay(Delay_time);
  Serial2.write(_msg_54, sizeof(_msg_54));
  byte _msg_55[]={0xaa ,0xab ,0x08 ,0x02 , 0x00 ,0x02 ,0x08 ,0x24 ,0x3b ,0x01 };
  delay(Delay_time);
  Serial2.write(_msg_55, sizeof(_msg_55));
  byte _msg_56[]={0xAA, 0xAB, 0x08, 0x02, 0x00, 0x02, 0x08, 0x25, 0x2B, 0x20 };
  delay(Delay_time);
  Serial2.write(_msg_56, sizeof(_msg_56));
  byte _msg_57[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x26 ,0x1b ,0x43 };
  delay(Delay_time);
  Serial2.write(_msg_57, sizeof(_msg_57));
  byte _msg_58[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 , 0x08 ,0x27 ,0x0b ,0x62 };
  delay(Delay_time);
  Serial2.write(_msg_58, sizeof(_msg_58));
  byte _msg_59[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x28 ,0xfa ,0x8d };
  delay(Delay_time);
  Serial2.write(_msg_59, sizeof(_msg_59));
  byte _msg_60[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x29 ,0xea ,0xac };
  delay(Delay_time);
  Serial2.write(_msg_60, sizeof(_msg_60));
  byte _msg_61[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x2a , 0xda ,0xcf };
  delay(Delay_time);
  Serial2.write(_msg_61, sizeof(_msg_61));
  byte _msg_62[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x2b ,0xca ,0xee };
  delay(Delay_time);
  Serial2.write(_msg_62, sizeof(_msg_62));
  byte _msg_63[]={0xaa ,0xab ,0x08 ,0x02 , 0x00 ,0x02 ,0x08 ,0x2c ,0xba ,0x09 };
  delay(Delay_time);
  Serial2.write(_msg_63, sizeof(_msg_63));
  byte _msg_64[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x2d ,0xaa ,0x28 };
  delay(Delay_time);
  Serial2.write(_msg_64, sizeof(_msg_64));
  byte _msg_65[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x2e ,0x9a ,0x4b };
  delay(Delay_time);
  Serial2.write(_msg_65, sizeof(_msg_65));
  byte _msg_66[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 , 0x08 ,0x2f ,0x8a ,0x6a };
  delay(Delay_time);
  Serial2.write(_msg_66, sizeof(_msg_66));
  byte _msg_67[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x30 ,0x69 ,0xb4 };
  delay(Delay_time);
  Serial2.write(_msg_67, sizeof(_msg_67));
  byte _msg_68[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x31 ,0x79 ,0x95 };
  delay(Delay_time);
  Serial2.write(_msg_68, sizeof(_msg_68));
  byte _msg_69[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x08 ,0x32 , 0x49 ,0xf6 };
  delay(Delay_time);
  Serial2.write(_msg_69, sizeof(_msg_69));
  byte _msg_70[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x07 ,0x08 ,0x84 ,0x00 ,0xff ,0xb6 ,0x03 ,0x05 ,0x62 , 0x05 };
  delay(Delay_time);
  Serial2.write(_msg_70, sizeof(_msg_70));
  byte _msg_71[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x06 ,0x08 ,0x83 ,0x03 ,0xe8 ,0x00 ,0x02 ,0x6d ,0xc5 };
  delay(Delay_time);
  Serial2.write(_msg_71, sizeof(_msg_71));

  byte _msg_73[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0x00 , 0x11 ,0xd4 ,0x5e }; // get number of antennas
  delay(Delay_time);
  Serial2.write(_msg_73, sizeof(_msg_73));

  byte _msg_76[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x1b ,0x04 ,0x00 ,0x00 , 0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 , 0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x62 ,0xa3};
  delay(Delay_time);
  Serial2.write(_msg_76, sizeof(_msg_76));
  byte _msg_77[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x04 ,0x02 ,0x00 ,0x00 ,0x00 ,0x0c ,0x14 ,};
  delay(Delay_time);
  Serial2.write(_msg_77, sizeof(_msg_77));
  byte _msg_78[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x05 ,0x00 ,0x04 ,0x00 ,0x00 , 0x00 ,0x00 ,0x51 };
  delay(Delay_time);
  Serial2.write(_msg_78, sizeof(_msg_78));
  byte _msg_79[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x05 ,0x00 ,0x04 ,0x01 ,0x00 ,0x06 ,0x57 ,0xa7  };
  delay(Delay_time);
  Serial2.write(_msg_79, sizeof(_msg_79));
  byte _msg_81[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x08, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x49, 0x2E  };
  delay(Delay_time);
  Serial2.write(_msg_81, sizeof(_msg_81));
  byte _msg_82[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x1b ,0x04 ,0x01 ,0x01 ,0x00 ,0x01 ,0x00 ,0x01 ,0x01 ,0x00 ,0x01 ,0x01 ,0x0e ,0x00 ,0x00 ,0x00 ,0x00 ,0x01 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x03 , 0x28 ,0x17 ,0xa5 };
  delay(Delay_time);
  Serial2.write(_msg_82, sizeof(_msg_82));
  byte _msg_83[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x07 ,0xd0 ,0x03 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0xae ,0xad};
  delay(Delay_time);
  Serial2.write(_msg_83, sizeof(_msg_83));
  byte _msg_84[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x0f ,0x00 ,0x05 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x01 , 0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x94 ,0x9c };
  delay(Delay_time);
  Serial2.write(_msg_84, sizeof(_msg_84));
  byte _msg_85[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x05 ,0x10 ,0xfd ,0x00 ,0x00 ,0x00 ,0x68 ,0x31};
  delay(Delay_time);
  Serial2.write(_msg_85, sizeof(_msg_85));
  byte _msg_86[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0xd0 ,0x02 ,0xe3 ,0x2b };
  delay(Delay_time);
  Serial2.write(_msg_86, sizeof(_msg_86));
  byte _msg_87[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0xd0 ,0x02 ,0xe3 ,0x2b};
  delay(Delay_time);
  Serial2.write(_msg_87, sizeof(_msg_87));
  byte _msg_88[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0xd0 ,0x02 ,0xe3 ,0x2b};
  delay(Delay_time);
  Serial2.write(_msg_88, sizeof(_msg_88));
  byte _msg_89[]={0xaa ,0xab ,0x08 ,0x02 ,0x00 ,0x02 ,0xd0 ,0x02 ,0xe3 ,0x2b};
  delay(Delay_time);
  Serial2.write(_msg_89, sizeof(_msg_89));

}

bool Stop_Reading(void)  
{  
  bool flag=0;
  byte msg[]={0xAA, 0xAB, 0x08, 0x08, 0x00, 0x00, 0x57, 0x5D};
  Serial2.write(msg, sizeof(msg));
  delay(Delay_time);
  Serial.println("Stop_Reading");

  byte Receive_msg[]={ 0xAA, 0xAB, 0x08, 0x01, 0x00, 0x03, 0x08, 0x01, 0x00, 0xD9, 0x70};  //Receive： AA AB 8 1 0 3 8 1 0 D9 70

  if(Receive_And_Check_Arrays( Receive_msg, sizeof(Receive_msg)))
  {
    flag=1;
    //Serial.println("OK");
  }

  delay(100);
  return flag;
}

bool Set_Pow(uint8_t pow)  //0-27
{  
  bool flag=0;

  if (pow>27)
  {  
    Serial.print("Wrong Value");
    return flag;
  }
  else
  {
    byte power_msg[]={0x08, 0x01, 0x00, 0x1B, 0x04, 0x01, 0x01, 0x00, 0x01,
    0x00, 0x01, 0x02, 0x00, 0x64, 0x01, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x28};

    uint16_t Pow_1;
    uint16_t Pow_2;
    Pow_1=(pow*10)>>8;
    Pow_2=(pow*10)<<8;
    Pow_2=Pow_2>>8;

    power_msg[14] =Pow_1;//pow
    power_msg[15] =Pow_2;//

    value=CRC16_CalculateBuf(power_msg,31);
    CRC_1=value>>8;
    CRC_2=value<<8;
    CRC_2=CRC_2>>8;
    crc_msg[0]=CRC_1;
    crc_msg[1]=CRC_2;

    Serial2.write(sof_msg, sizeof(sof_msg));
    Serial2.write(power_msg, sizeof(power_msg));
    Serial2.write(crc_msg, sizeof(crc_msg));

  #if 0
    for ( int i=0; i<31; i++)
    {
      Serial.print(power_msg[i],HEX);  
      Serial.print(" ");
    }
      Serial.println();
  #endif

    byte Receive_msg[]={ 0xAA, 0xAB, 0x08, 0x01, 0x00, 0x03, 0x08, 0x01, 0x00, 0xD9, 0x70};  //Receive： AA AB 8 1 0 3 8 1 0 D9 70

    if(Receive_And_Check_Arrays( Receive_msg, sizeof(Receive_msg)))
    {
      flag=1;
     // Serial.println("OK");
    }

    return flag;
  }
}

bool Start_Reading(uint8_t pow, uint8_t Session, uint8_t Flag, uint8_t SL, uint8_t Q )
{
  bool flag=1;
  byte Receive_msg[]={ 0xAA, 0xAB, 0x08, 0x01, 0x00, 0x03, 0x08, 0x01, 0x00, 0xD9, 0x70};  //Receive： AA AB 8 1 0 3 8 1 0 D9 70


  byte _msg_1[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x1b ,0x04 ,0x00  ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,
                 0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x62 ,0xa3};
  delay(Delay_time);
  Serial2.write(_msg_1, sizeof(_msg_1));
  if(!Receive_And_Check_Arrays( Receive_msg, sizeof(Receive_msg)))
  {
    flag=0;
  }

  byte _msg_2[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x0d ,0x03 ,0x80 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x1f ,0x8c};
  delay(Delay_time);
  Serial2.write(_msg_2, sizeof(_msg_2));
  if(!Receive_And_Check_Arrays( Receive_msg, sizeof(Receive_msg)))
  {
    flag=0;
  }

  byte _msg_3[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x0b ,0x01 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x2b ,0x66};
  delay(Delay_time);
  Serial2.write(_msg_3, sizeof(_msg_3));
  if(!Receive_And_Check_Arrays( Receive_msg, sizeof(Receive_msg)))
  {
    flag=0;
  }

  Advanced_Settings( Session, Flag, SL, Q );
  delay(100);
  if(!Receive_And_Check_Arrays( Receive_msg, sizeof(Receive_msg)))
  {
    flag=0;
  }
  /*byte _msg_4[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x08 ,0x02 ,0x01 ,0x01 ,0x01 ,0x01 ,0x00 ,0x02 ,0x06 ,0x39 ,0x3e};
  delay(Delay_time);
  Serial2.write(_msg_4, sizeof(_msg_4));*/

  Set_Pow(pow);
  delay(100);
  if(!Receive_And_Check_Arrays( Receive_msg, sizeof(Receive_msg)))
  {
    flag=0;
  }
  /*byte _msg_5[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x1B, 0x04, 0x01, 0x01, 0x00, 0x01,
    0x00, 0x01, 0x02, 0x00, 0x64, 0x01, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x01,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x28, 0x47, 0xA6 };

  delay(Delay_time);
  Serial2.write(_msg_5, sizeof(_msg_5));*/

  byte _msg_7[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x08 ,0x02 ,0x02 ,0x01 ,0x01 ,0x01 ,0x00 ,0x02 ,0x06 ,0xe1 ,0xbc}; 
  delay(Delay_time);
  Serial2.write(_msg_7, sizeof(_msg_7));
  if(!Receive_And_Check_Arrays( Receive_msg, sizeof(Receive_msg)))
  {
    flag=0;
  }

  byte _msg_8[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x1B, 0x04, 0x02, 0x01, 0x00, 0x02, 0x00, 0x02, 0x02, 0x00, 0x64, 0x01, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x28, 0x1A, 0xF8};
  delay(Delay_time);
  Serial2.write(_msg_8, sizeof(_msg_8));
  if(!Receive_And_Check_Arrays( Receive_msg, sizeof(Receive_msg)))
  {
    flag=0;
  }

  byte _msg_9[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x05 ,0x00 ,0x04 ,0x01 ,0x00 ,0x05 ,0x67 ,0xc4};// set tag packet enable
  delay(Delay_time);
  Serial2.write(_msg_9, sizeof(_msg_9));
  if(!Receive_And_Check_Arrays( Receive_msg, sizeof(Receive_msg)))
  {
    flag=0;
  }

  byte _msg_10[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x06 ,0x00 ,0x09 ,0x00 ,0x00 ,0xa6 ,0x71 ,0x6f ,0x99}; // set tag packets contents
  delay(Delay_time);
  Serial2.write(_msg_10, sizeof(_msg_10));
  if(!Receive_And_Check_Arrays( Receive_msg, sizeof(Receive_msg)))
  {
    flag=0;
  }

  byte _msg_11[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x05 ,0x00 ,0x04 ,0x01 ,0x02 ,0x91 ,0xc2 ,0x9b};
  delay(Delay_time);
  Serial2.write(_msg_11, sizeof(_msg_11));
  if(!Receive_And_Check_Arrays( Receive_msg, sizeof(Receive_msg)))
  {
    flag=0;
  }

  byte _msg_12[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x05 ,0x00 ,0x04 ,0x01 ,0x03 ,0x08 ,0xe3 ,0x3a};
  delay(Delay_time);
  Serial2.write(_msg_12, sizeof(_msg_12));
  if(!Receive_And_Check_Arrays( Receive_msg, sizeof(Receive_msg)))
  {
    flag=0;
  }

  byte _msg_13[]={0xAA,0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x91, 0xF1, 0xAA };
  delay(Delay_time);
  Serial2.write(_msg_13, sizeof(_msg_13));
  if(!Receive_And_Check_Arrays( Receive_msg, sizeof(Receive_msg)))
  {
    flag=0;
  }

  byte _msg_14[]={0xaa ,0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x05 ,0x00 ,0x04 ,0x01 ,0x03 ,0x86 ,0x93 ,0x7c };
  delay(Delay_time);
  Serial2.write(_msg_14, sizeof(_msg_14));
  if(!Receive_And_Check_Arrays( Receive_msg, sizeof(Receive_msg)))
  {
    flag=0;
  }

  byte _msg_15[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x05 ,0x00 ,0x04 ,0x01 ,0x03 ,0x85 ,0xa3 ,0x1f};
  delay(Delay_time);
  Serial2.write(_msg_15, sizeof(_msg_15));
  if(!Receive_And_Check_Arrays( Receive_msg, sizeof(Receive_msg)))
  {
    flag=0;
  }

  byte _msg_16[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x05 ,0x00 ,0x04 ,0x01 ,0x03 ,0x87 ,0x83 ,0x5d};
  delay(Delay_time);
  Serial2.write(_msg_16, sizeof(_msg_16));
  if(!Receive_And_Check_Arrays( Receive_msg, sizeof(Receive_msg)))
  {
    flag=0;
  }

  byte _msg_17[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x08 ,0x10 ,0xff ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x09 ,0xdd};
  delay(Delay_time);
  Serial2.write(_msg_17, sizeof(_msg_17));
  if(!Receive_And_Check_Arrays( Receive_msg, sizeof(Receive_msg)))
  {
    flag=0;
  }

  byte _msg_18[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x0f ,0x00 ,0x05 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0xd3 ,0x4f};
  delay(Delay_time);
  Serial2.write(_msg_18, sizeof(_msg_18));
  if(!Receive_And_Check_Arrays( Receive_msg, sizeof(Receive_msg)))
  {
    flag=0;
  }

  byte _msg_19[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x03 ,0x10 ,0xeb ,0x00 ,0xcc ,0xcb};
  delay(Delay_time);
  Serial2.write(_msg_19, sizeof(_msg_19));
  if(!Receive_And_Check_Arrays( Receive_msg, sizeof(Receive_msg)))
  {
    flag=0;
  }

  byte _msg_20[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x07 ,0xd0 ,0x03 ,0x00 ,0x00 ,0x00 ,0x00 ,0x00 ,0xae ,0xad};
  delay(Delay_time);
  Serial2.write(_msg_20, sizeof(_msg_20));
  if(!Receive_And_Check_Arrays( Receive_msg, sizeof(Receive_msg)))
  {
    flag=0;
  }

  byte _msg_21[]={0xaa ,0xab ,0x08 ,0x01 ,0x00 ,0x05 ,0x10 ,0xfd ,0x00 ,0x00 ,0x00 ,0x68 ,0x31};
  delay(Delay_time);
  Serial2.write(_msg_21, sizeof(_msg_21));
  if(!Receive_And_Check_Arrays( Receive_msg, sizeof(Receive_msg)))
  {
    flag=0;
  } 

  byte _msg_22[]={0xaa ,0xab ,0x08 ,0x09 ,0x00 ,0x00 ,0x60 ,0x6d};
  delay(Delay_time);
  Serial2.write(_msg_22, sizeof(_msg_22));
  if(!Receive_And_Check_Arrays( Receive_msg, sizeof(Receive_msg)))
  {
    flag=0;
  }

  return flag;
}

void Kill_Epc_16(byte *epc, byte *password)
{
  byte msg_1[]={ 0xAA, 0xAB, 0x08, 0x04, 0x00, 0x02, 0x04, 0x0C, 0x16, 0x83 };
  Serial2.write(msg_1, sizeof(msg_1));
  delay(Delay_time);
  //Serial2.write(msg_1,sizeof(msg_1));
  /*for (size_t i = 0; i < sizeof(msg_1); i++)
  {
    Serial.print(msg_1[i],HEX);
    Serial.print(" ");
  }
  Serial.println();*/

  byte msg[31];
  msg[0]={0x08};
  msg[1]={0x01};
  msg[2]={0x00};
  msg[3]={0x1B};
  msg[4]={0x01};

  for (size_t i = 0; i < 32; i++)
  {
    msg[5]=i+1;
    if (i==0) msg[6]=1;    
    else      msg[6]=0;
    msg[7] =0;
    msg[8] =0;
    msg[9] =1;
    msg[10] =0;
    msg[11] =32;
    msg[12] =128;
    for (int i = 0; i < 16; i++)
    {
      msg[i+13]=(epc[i]);
    }
    msg[29] =00;
    msg[30] =00;
    value=CRC16_CalculateBuf(msg,sizeof(msg));

    CRC_1=value>>8;
    CRC_2=value<<8;
    CRC_2=CRC_2>>8;
    crc_msg[0]=CRC_1;
    crc_msg[1]=CRC_2;

#ifdef Debug
    for (size_t i = 0; i < sizeof(sof_msg); i++)
    {
      Serial.print(sof_msg[i],HEX);
      Serial.print(" ");
    }
    for (size_t i = 0; i < sizeof(msg); i++)
    {
      Serial.print(msg[i],HEX);
      Serial.print(" ");
    }
    for (size_t i = 0; i < sizeof(crc_msg); i++)
    {
      Serial.print(crc_msg[i],HEX);
      Serial.print(" ");
    }
    Serial.println();
#endif

    Serial2.write(sof_msg, sizeof(sof_msg));
    Serial2.write(msg, sizeof(msg));
    Serial2.write(crc_msg, sizeof(crc_msg));
    delay(Delay_time);
  }

  Set_Selected_Epc_16(epc);

  byte msg_b[16];
  msg_b[0]={0x08};
  msg_b[1]={0x01};  
  msg_b[2]={0x00};  
  msg_b[3]={0x0C}; 
  msg_b[4]={0x03}; 
  msg_b[5]={0x21}; 
  msg_b[6]={0x01};
  msg_b[7]={0x03};
  
  for (size_t n = 0; n < 4; n++)
  {
    msg_b[n+8]=(password[n]);
  }
  msg_b[12]={0x00};
  msg_b[13]={0x01};
  msg_b[14]={0x00};
  msg_b[15]={0x01};

  value=CRC16_CalculateBuf(msg_b,sizeof(msg_b));
  CRC_1=value>>8;
  CRC_2=value<<8;
  CRC_2=CRC_2>>8;
  crc_msg[0]=CRC_1;
  crc_msg[1]=CRC_2;

#ifdef Debug

  for (size_t i = 0; i < sizeof(sof_msg); i++)
  {
    Serial.print(sof_msg[i],HEX);
    Serial.print(" ");
  }

  for (size_t i = 0; i < sizeof(msg_b); i++)
  {
    Serial.print(msg_b[i],HEX);
    Serial.print(" ");
  }
  for (size_t i = 0; i < sizeof(crc_msg); i++)
  {
    Serial.print(crc_msg[i],HEX);
    Serial.print(" ");
  }
#endif

  Serial2.write(sof_msg, sizeof(sof_msg));
  Serial2.write(msg_b, sizeof(msg_b));
  Serial2.write(crc_msg, sizeof(crc_msg));
  delay(Delay_time);

byte msg_2[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x08, 0x02, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x05, 0x6F, 0x3F};
Serial2.write(msg_2, sizeof(msg_2));
delay(Delay_time);
byte msg_3[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x08, 0x02, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x05, 0xB7, 0xBD};
Serial2.write(msg_3, sizeof(msg_3));
delay(Delay_time);
byte msg_4[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x1B, 0x04, 0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x0E, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
               0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCA, 0x24, 0x8E};
Serial2.write(msg_4, sizeof(msg_4));
delay(Delay_time);
byte msg_5[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x1B, 0x04, 0x02, 0x01, 0x00, 0x02, 0x00, 0x02, 0x01, 0x00, 0x01, 0x01, 0x0E, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00,
               0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCA, 0x79, 0xD0};
Serial2.write(msg_5, sizeof(msg_5));
delay(Delay_time);
byte msg_6 []={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x07, 0xD0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAE, 0xAD};
Serial2.write(msg_6, sizeof(msg_6));
delay(Delay_time);
byte msg_7 []={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x0F, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x9C};
Serial2.write(msg_7, sizeof(msg_7));
delay(Delay_time);
byte msg_8 []={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x08, 0x10, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xDD};
Serial2.write(msg_8, sizeof(msg_8));
delay(Delay_time);
byte msg_9 []={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x09, 0xF3, 0x1B};
Serial2.write(msg_9, sizeof(msg_9));
delay(Delay_time);
byte msg_10[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x0A, 0xC3, 0x78};
Serial2.write(msg_10, sizeof(msg_10));
delay(Delay_time);
byte msg_11[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x02, 0x91, 0xC2, 0x9B};
Serial2.write(msg_11, sizeof(msg_11));
delay(Delay_time);
byte msg_12[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x08, 0xE3, 0x3A};
Serial2.write(msg_12, sizeof(msg_12));
delay(Delay_time);
byte msg_13[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x85, 0xA3, 0x1F};
Serial2.write(msg_13, sizeof(msg_13));
delay(Delay_time);
byte msg_14[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x86, 0x93, 0x7C};
Serial2.write(msg_14, sizeof(msg_14));
delay(Delay_time);
byte msg_15[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x87, 0x83, 0x5D};
Serial2.write(msg_15, sizeof(msg_15));
delay(Delay_time);
byte msg_16[]={0xAA, 0xAB, 0x08, 0x09, 0x00, 0x00, 0x60, 0x6D};
Serial2.write(msg_16, sizeof(msg_16));
delay(Delay_time);

}

void Kill_Epc_12(byte *epc, byte *password)
{
 
  byte msg_1[]={ 0xAA, 0xAB, 0x08, 0x04, 0x00, 0x02, 0x04, 0x0C, 0x16, 0x83 };
  Serial2.write(msg_1, sizeof(msg_1));
  delay(Delay_time);
  Serial2.write(msg_1,sizeof(msg_1));
  for (size_t i = 0; i < sizeof(msg_1); i++)
  {
    Serial.print(msg_1[i],HEX);
    Serial.print(" ");
  }
  Serial.println();

  Set_Select_Filter_12(epc);

  Set_Selected_Epc_12 (epc);
 
  byte msg_b[16];
  msg_b[0]={0x08};
  msg_b[1]={0x01};  
  msg_b[2]={0x00};  
  msg_b[3]={0x0C}; 
  msg_b[4]={0x03}; 
  msg_b[5]={0x21}; 
  msg_b[6]={0x01};
  msg_b[7]={0x03};
  
  for (size_t n = 0; n < 4; n++)
  {
    msg_b[n+8]=(password[n]);
  }
  msg_b[12]={0x00};
  msg_b[13]={0x01};
  msg_b[14]={0x00};
  msg_b[15]={0x01};

  value=CRC16_CalculateBuf(msg_b,sizeof(msg_b));
  CRC_1=value>>8;
  CRC_2=value<<8;
  CRC_2=CRC_2>>8;
  crc_msg[0]=CRC_1;
  crc_msg[1]=CRC_2;

#ifdef Debug
  for (size_t i = 0; i < sizeof(sof_msg); i++)
  {
    Serial.print(sof_msg[i],HEX);
    Serial.print(" ");
  }

  for (size_t i = 0; i < sizeof(msg_b); i++)
  {
    Serial.print(msg_b[i],HEX);
    Serial.print(" ");
  }
  for (size_t i = 0; i < sizeof(crc_msg); i++)
  {
    Serial.print(crc_msg[i],HEX);
    Serial.print(" ");
  }
#endif

  Serial2.write(sof_msg, sizeof(sof_msg));
  Serial2.write(msg_b, sizeof(msg_b));
  Serial2.write(crc_msg, sizeof(crc_msg));
  delay(Delay_time);

byte msg_2[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x08, 0x02, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x05, 0x6F, 0x3F};
Serial2.write(msg_2, sizeof(msg_2));
delay(Delay_time);
byte msg_3[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x08, 0x02, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x05, 0xB7, 0xBD};
Serial2.write(msg_3, sizeof(msg_3));
delay(Delay_time);
byte msg_4[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x1B, 0x04, 0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x0E, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
               0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCA, 0x24, 0x8E};
Serial2.write(msg_4, sizeof(msg_4));
delay(Delay_time);
byte msg_5[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x1B, 0x04, 0x02, 0x01, 0x00, 0x02, 0x00, 0x02, 0x01, 0x00, 0x01, 0x01, 0x0E, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00,
               0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCA, 0x79, 0xD0};
Serial2.write(msg_5, sizeof(msg_5));
delay(Delay_time);
byte msg_6 []={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x07, 0xD0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAE, 0xAD};
Serial2.write(msg_6, sizeof(msg_6));
delay(Delay_time);
byte msg_7 []={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x0F, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x9C};
Serial2.write(msg_7, sizeof(msg_7));
delay(Delay_time);
byte msg_8 []={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x08, 0x10, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xDD};
Serial2.write(msg_8, sizeof(msg_8));
delay(Delay_time);
byte msg_9 []={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x09, 0xF3, 0x1B};
Serial2.write(msg_9, sizeof(msg_9));
delay(Delay_time);
byte msg_10[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x0A, 0xC3, 0x78};
Serial2.write(msg_10, sizeof(msg_10));
delay(Delay_time);
byte msg_11[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x02, 0x91, 0xC2, 0x9B};
Serial2.write(msg_11, sizeof(msg_11));
delay(Delay_time);
byte msg_12[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x08, 0xE3, 0x3A};
Serial2.write(msg_12, sizeof(msg_12));
delay(Delay_time);
byte msg_13[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x85, 0xA3, 0x1F};
Serial2.write(msg_13, sizeof(msg_13));
delay(Delay_time);
byte msg_14[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x86, 0x93, 0x7C};
Serial2.write(msg_14, sizeof(msg_14));
delay(Delay_time);
byte msg_15[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x87, 0x83, 0x5D};
Serial2.write(msg_15, sizeof(msg_15));
delay(Delay_time);
byte msg_16[]={0xAA, 0xAB, 0x08, 0x09, 0x00, 0x00, 0x60, 0x6D};
Serial2.write(msg_16, sizeof(msg_16));
delay(Delay_time);

}

void Write_Epc_16(byte *OldEpc, byte *password, byte *NewEpc) // şifresiz epcler için password 0 gönderilir.
{
  byte msg_1[]={ 0xAA, 0xAB, 0x08, 0x04, 0x00, 0x02, 0x04, 0x0C, 0x16, 0x83 };
  for (size_t i = 0; i < sizeof(msg_1); i++)
  {
    Serial.print(msg_1[i],HEX);
    Serial.print(" ");
  }
  Serial.println();
  Serial2.write(msg_1, sizeof(msg_1));
  delay(Delay_time);

  Set_Select_Filter_16(OldEpc);

  Set_Selected_Epc_16(OldEpc);  

if( password !=0)
{
  byte msg_b[15];
  msg_b[0]={0x08};
  msg_b[1]={0x01};  
  msg_b[2]={0x00};  
  msg_b[3]={0x0B}; 
  msg_b[4]={0x03}; 
  msg_b[5]={0x21}; 
  msg_b[6]={0x01};
  msg_b[7]={0x05};
  
  for (size_t n = 0; n < 4; n++)
  {
    msg_b[n+8]=(password[n]);
  }
  msg_b[12]={0x00};
  msg_b[13]={0x00};
  msg_b[14]={0x01};

  value=CRC16_CalculateBuf(msg_b,sizeof(msg_b));
  CRC_1=value>>8;
  CRC_2=value<<8;
  CRC_2=CRC_2>>8;
  crc_msg[0]=CRC_1;
  crc_msg[1]=CRC_2;

#ifdef Debug
  for (size_t i = 0; i < sizeof(sof_msg); i++)
  {
    Serial.print(sof_msg[i],HEX);
    Serial.print(" ");
  }

  for (size_t i = 0; i < sizeof(msg_b); i++)
  {
    Serial.print(msg_b[i],HEX);
    Serial.print(" ");
  }
  for (size_t i = 0; i < sizeof(crc_msg); i++)
  {
    Serial.print(crc_msg[i],HEX);
    Serial.print(" ");
  }
  Serial.println();
  #endif

  Serial2.write(sof_msg, sizeof(sof_msg));
  Serial2.write(msg_b, sizeof(msg_b));
  Serial2.write(crc_msg, sizeof(crc_msg));
  delay(Delay_time);

}
  byte msg_c[31];
  msg_c[0]= {0x08};
  msg_c[1]= {0x01};  
  msg_c[2]= {0x00};  
  msg_c[3]= {0x1B}; 
  msg_c[4]= {0x03}; 
  if (password == 0)  msg_c[5]= {0x21}; 
  else                msg_c[5]= {0x22}; 
  
  msg_c[6]= {0x01};
  msg_c[7]= {0x0B};
  msg_c[8]= {0x01};
  msg_c[9]= {0x00};
  msg_c[10]={0x02};
  msg_c[11]={0x08};
 
  
  for (size_t i = 0; i < 16; i++)
  {
    msg_c[i+12]=(NewEpc[i]);
  }
  msg_c[28]={0x01};
  msg_c[29]={0x00};
  msg_c[30]={0x01};

  value=CRC16_CalculateBuf(msg_c,sizeof(msg_c));
  CRC_1=value>>8;
  CRC_2=value<<8;
  CRC_2=CRC_2>>8;
  crc_msg[0]=CRC_1;
  crc_msg[1]=CRC_2;

  Serial2.write(sof_msg, sizeof(sof_msg));
  Serial2.write(msg_c, sizeof(msg_c));
  Serial2.write(crc_msg, sizeof(crc_msg));
  delay(Delay_time);

#ifdef Debug
  for (size_t i = 0; i < sizeof(sof_msg); i++)
  {
    Serial.print(sof_msg[i],HEX);
    Serial.print(" ");
  }

  for (size_t i = 0; i < sizeof(msg_c); i++)
  {
    Serial.print(msg_c[i],HEX);
    Serial.print(" ");
  }
  for (size_t i = 0; i < sizeof(crc_msg); i++)
  {
    Serial.print(crc_msg[i],HEX);
    Serial.print(" ");
  }
  Serial.println();
#endif

  byte msg_2[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x08, 0x02, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x05, 0x6F, 0x3F};
  Serial2.write(msg_2, sizeof(msg_2));
  delay(Delay_time);
  byte msg_3[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x08, 0x02, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x05, 0xB7, 0xBD};
  Serial2.write(msg_3, sizeof(msg_3));
  delay(Delay_time);
  byte msg_4[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x1B, 0x04, 0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x0E, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
                0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCA, 0x44, 0x6D};
  Serial2.write(msg_4, sizeof(msg_4));
  delay(Delay_time);
  byte msg_5[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x1B, 0x04, 0x02, 0x01, 0x00, 0x02, 0x00, 0x02, 0x01, 0x00, 0x01, 0x01, 0x0E, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00,
                0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCA, 0x19, 0x33};
  Serial2.write(msg_5, sizeof(msg_5));
  delay(Delay_time);
  byte msg_6 []={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x07, 0xD0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAE, 0xAD};
  Serial2.write(msg_6, sizeof(msg_6));
  delay(Delay_time);
  byte msg_7 []={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x0F, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x9C};
  Serial2.write(msg_7, sizeof(msg_7));
  delay(Delay_time);
  byte msg_8 []={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x08, 0x10, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xDD};
  Serial2.write(msg_8, sizeof(msg_8));
  delay(Delay_time);
  byte msg_9 []={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x09, 0xF3, 0x1B};
  Serial2.write(msg_9, sizeof(msg_9));
  delay(Delay_time);
  byte msg_10[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x0A, 0xC3, 0x78};
  Serial2.write(msg_10, sizeof(msg_10));
  delay(Delay_time);
  byte msg_11[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x02, 0x91, 0xC2, 0x9B};
  Serial2.write(msg_11, sizeof(msg_11));
  delay(Delay_time);
  byte msg_12[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x08, 0xE3, 0x3A};
  Serial2.write(msg_12, sizeof(msg_12));
  delay(Delay_time);
  byte msg_13[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x85, 0xA3, 0x1F};
  Serial2.write(msg_13, sizeof(msg_13));
  delay(Delay_time);
  byte msg_14[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x86, 0x93, 0x7C};
  Serial2.write(msg_14, sizeof(msg_14));
  delay(Delay_time);
  byte msg_15[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x87, 0x83, 0x5D};
  Serial2.write(msg_15, sizeof(msg_15));
  delay(Delay_time);
  byte msg_16[]={0xAA, 0xAB, 0x08, 0x09, 0x00, 0x00, 0x60, 0x6D};
  Serial2.write(msg_16, sizeof(msg_16));
  delay(Delay_time);
}

void Write_Epc_12(byte *OldEpc, byte *password, byte *NewEpc) // şifresiz epcler için password 0 gönderilir.
{
  byte msg_1[]={ 0xAA, 0xAB, 0x08, 0x04, 0x00, 0x02, 0x04, 0x0C, 0x16, 0x83 };
  for (size_t i = 0; i < sizeof(msg_1); i++)
  {
    Serial.print(msg_1[i],HEX);
    Serial.print(" ");
  }
  Serial.println();
  Serial2.write(msg_1, sizeof(msg_1));
  delay(Delay_time);

  Set_Select_Filter_12(OldEpc);

  Set_Selected_Epc_12 (OldEpc);

if (password != 0 )
{
  byte msg_b[15];
  msg_b[0]={0x08};
  msg_b[1]={0x01};  
  msg_b[2]={0x00};  
  msg_b[3]={0x0B}; 
  msg_b[4]={0x03}; 
  msg_b[5]={0x21}; 
  msg_b[6]={0x01};
  msg_b[7]={0x05};
  
  for (size_t n = 0; n < 4; n++)
  {
    msg_b[n+8]=(password[n]);
  }
  msg_b[12]={0x00};
  msg_b[13]={0x00};
  msg_b[14]={0x01};

  value=CRC16_CalculateBuf(msg_b,sizeof(msg_b));
  CRC_1=value>>8;
  CRC_2=value<<8;
  CRC_2=CRC_2>>8;
  crc_msg[0]=CRC_1;
  crc_msg[1]=CRC_2;

#ifdef Debug

  for (size_t i = 0; i < sizeof(sof_msg); i++)
  {
    Serial.print(sof_msg[i],HEX);
    Serial.print(" ");
  }

  for (size_t i = 0; i < sizeof(msg_b); i++)
  {
    Serial.print(msg_b[i],HEX);
    Serial.print(" ");
  }
  for (size_t i = 0; i < sizeof(crc_msg); i++)
  {
    Serial.print(crc_msg[i],HEX);
    Serial.print(" ");
  }
  Serial.println();
#endif
  Serial2.write(sof_msg, sizeof(sof_msg));
  Serial2.write(msg_b, sizeof(msg_b));
  Serial2.write(crc_msg, sizeof(crc_msg));
  delay(Delay_time);

}

  byte msg_c[27];
  msg_c[0]= {0x08};
  msg_c[1]= {0x01};  
  msg_c[2]= {0x00};  
  msg_c[3]= {0x17}; 
  msg_c[4]= {0x03}; 
  if (password == 0 )   msg_c[5]= {0x21}; 
  else                  msg_c[5]= {0x22}; 

  msg_c[6]= {0x01};
  msg_c[7]= {0x0B};
  msg_c[8]= {0x01};
  msg_c[9]= {0x00};
  msg_c[10]={0x02};
  msg_c[11]={0x06};
 
  
  for (size_t i = 0; i < 12; i++)
  {
    msg_c[i+12]=(NewEpc[i]);
  }
  msg_c[24]={0x01};
  msg_c[25]={0x00};
  msg_c[26]={0x01};

  value=CRC16_CalculateBuf(msg_c,sizeof(msg_c));
  CRC_1=value>>8;
  CRC_2=value<<8;
  CRC_2=CRC_2>>8;
  crc_msg[0]=CRC_1;
  crc_msg[1]=CRC_2;

  Serial2.write(sof_msg, sizeof(sof_msg));
  Serial2.write(msg_c, sizeof(msg_c));
  Serial2.write(crc_msg, sizeof(crc_msg));
  delay(Delay_time);

#ifdef Debug
  for (size_t i = 0; i < sizeof(sof_msg); i++)
  {
    Serial.print(sof_msg[i],HEX);
    Serial.print(" ");
  }

  for (size_t i = 0; i < sizeof(msg_c); i++)
  {
    Serial.print(msg_c[i],HEX);
    Serial.print(" ");
  }
  for (size_t i = 0; i < sizeof(crc_msg); i++)
  {
    Serial.print(crc_msg[i],HEX);
    Serial.print(" ");
  }
Serial.println();
#endif  

  byte msg_2[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x08, 0x02, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x05, 0x6F, 0x3F};
  Serial2.write(msg_2, sizeof(msg_2));
  delay(Delay_time);
  byte msg_3[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x08, 0x02, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x05, 0xB7, 0xBD};
  Serial2.write(msg_3, sizeof(msg_3));
  delay(Delay_time);
  byte msg_4[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x1B, 0x04, 0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x0E, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
                0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCA, 0x44, 0x6D};
  Serial2.write(msg_4, sizeof(msg_4));
  delay(Delay_time);
  byte msg_5[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x1B, 0x04, 0x02, 0x01, 0x00, 0x02, 0x00, 0x02, 0x01, 0x00, 0x01, 0x01, 0x0E, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00,
                0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCA, 0x19, 0x33};
  Serial2.write(msg_5, sizeof(msg_5));
  delay(Delay_time);
  byte msg_6 []={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x07, 0xD0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAE, 0xAD};
  Serial2.write(msg_6, sizeof(msg_6));
  delay(Delay_time);
  byte msg_7 []={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x0F, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x9C};
  Serial2.write(msg_7, sizeof(msg_7));
  delay(Delay_time);
  byte msg_8 []={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x08, 0x10, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xDD};
  Serial2.write(msg_8, sizeof(msg_8));
  delay(Delay_time);
  byte msg_9 []={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x09, 0xF3, 0x1B};
  Serial2.write(msg_9, sizeof(msg_9));
  delay(Delay_time);
  byte msg_10[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x0A, 0xC3, 0x78};
  Serial2.write(msg_10, sizeof(msg_10));
  delay(Delay_time);
  byte msg_11[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x02, 0x91, 0xC2, 0x9B};
  Serial2.write(msg_11, sizeof(msg_11));
  delay(Delay_time);
  byte msg_12[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x08, 0xE3, 0x3A};
  Serial2.write(msg_12, sizeof(msg_12));
  delay(Delay_time);
  byte msg_13[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x85, 0xA3, 0x1F};
  Serial2.write(msg_13, sizeof(msg_13));
  delay(Delay_time);
  byte msg_14[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x86, 0x93, 0x7C};
  Serial2.write(msg_14, sizeof(msg_14));
  delay(Delay_time);
  byte msg_15[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x87, 0x83, 0x5D};
  Serial2.write(msg_15, sizeof(msg_15));
  delay(Delay_time);
  byte msg_16[]={0xAA, 0xAB, 0x08, 0x09, 0x00, 0x00, 0x60, 0x6D};
  Serial2.write(msg_16, sizeof(msg_16));
  delay(Delay_time);
}

void Lock_Epc_Memory_16(byte *epc, byte *password, bool LockStatus) // LockStatus 1 
{
  byte msg_1[]={ 0xAA, 0xAB, 0x08, 0x04, 0x00, 0x02, 0x04, 0x0C, 0x16, 0x83 };
  Serial2.write(msg_1, sizeof(msg_1));
  delay(Delay_time);

  Set_Select_Filter_16(epc);

  Set_Selected_Epc_16(epc);

  byte msg_b[15];
  msg_b[0]={0x08};
  msg_b[1]={0x01};  
  msg_b[2]={0x00};  
  msg_b[3]={0x0B}; 
  msg_b[4]={0x03}; 
  msg_b[5]={0x21}; 
  msg_b[6]={0x01};
  msg_b[7]={0x05};
  
  for (size_t n = 0; n < 4; n++)
  {
    msg_b[n+8]=(password[n]);
  }
  msg_b[12]={0x00};
  msg_b[13]={0x00};
  msg_b[14]={0x01};

  value=CRC16_CalculateBuf(msg_b,sizeof(msg_b));
  CRC_1=value>>8;
  CRC_2=value<<8;
  CRC_2=CRC_2>>8;
  crc_msg[0]=CRC_1;
  crc_msg[1]=CRC_2;
#ifdef Debug

  for (size_t i = 0; i < sizeof(sof_msg); i++)
  {
    Serial.print(sof_msg[i],HEX);
    Serial.print(" ");
  }

  for (size_t i = 0; i < sizeof(msg_b); i++)
  {
    Serial.print(msg_b[i],HEX);
    Serial.print(" ");
  }
  for (size_t i = 0; i < sizeof(crc_msg); i++)
  {
    Serial.print(crc_msg[i],HEX);
    Serial.print(" ");
  }
  Serial.println();
  #endif

  Serial2.write(sof_msg, sizeof(sof_msg));
  Serial2.write(msg_b, sizeof(msg_b));
  Serial2.write(crc_msg, sizeof(crc_msg));
  delay(Delay_time);
  
  if (LockStatus == true) 
  {
    byte msg_x[]={ 0xAA, 0xAB, 0x08, 0x01, 0x00, 0x0B, 0x03, 0x22, 0x01, 0x04, 0x00, 0x08, 0x80, 0x20, 0x01, 0x00, 0x01, 0xB7, 0xD1 };
    Serial2.write(msg_x, sizeof(msg_x));
    delay(Delay_time);
  }
  else if (LockStatus == false)            
  {
    byte msg_x[]={ 0xAA, 0xAB, 0x08, 0x01, 0x00, 0x0B, 0x03, 0x22, 0x01, 0x04, 0x00, 0x08, 0x80, 0x00, 0x01, 0x00, 0x01, 0x80, 0x9F };
    Serial2.write(msg_x, sizeof(msg_x));
    delay(Delay_time);
  }

  byte msg_2[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x08, 0x02, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x05, 0x6F, 0x3F};
  Serial2.write(msg_2, sizeof(msg_2));
  delay(Delay_time);
  byte msg_3[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x08, 0x02, 0x02, 0x01, 0x01, 0x01, 0x00, 0x00, 0x05, 0xB7, 0xBD};
  Serial2.write(msg_3, sizeof(msg_3));
  delay(Delay_time);
  byte msg_4[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x1B, 0x04, 0x01, 0x01, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x0E, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
                0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCA, 0x44, 0x6D};
  Serial2.write(msg_4, sizeof(msg_4));
  delay(Delay_time);
  byte msg_5[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x1B, 0x04, 0x02, 0x01, 0x00, 0x02, 0x00, 0x02, 0x01, 0x00, 0x01, 0x01, 0x0E, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00,
                0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCA, 0x19, 0x33};
  Serial2.write(msg_5, sizeof(msg_5));
  delay(Delay_time);
  byte msg_6 []={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x07, 0xD0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAE, 0xAD};
  Serial2.write(msg_6, sizeof(msg_6));
  delay(Delay_time);
  byte msg_7 []={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x0F, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x9C};
  Serial2.write(msg_7, sizeof(msg_7));
  delay(Delay_time);
  byte msg_8 []={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x08, 0x10, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0xDD};
  Serial2.write(msg_8, sizeof(msg_8));
  delay(Delay_time);
  byte msg_9 []={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x09, 0xF3, 0x1B};
  Serial2.write(msg_9, sizeof(msg_9));
  delay(Delay_time);
  byte msg_10[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x0A, 0xC3, 0x78};
  Serial2.write(msg_10, sizeof(msg_10));
  delay(Delay_time);
  byte msg_11[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x02, 0x91, 0xC2, 0x9B};
  Serial2.write(msg_11, sizeof(msg_11));
  delay(Delay_time);
  byte msg_12[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x08, 0xE3, 0x3A};
  Serial2.write(msg_12, sizeof(msg_12));
  delay(Delay_time);
  byte msg_13[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x85, 0xA3, 0x1F};
  Serial2.write(msg_13, sizeof(msg_13));
  delay(Delay_time);
  byte msg_14[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x86, 0x93, 0x7C};
  Serial2.write(msg_14, sizeof(msg_14));
  delay(Delay_time);
  byte msg_15[]={0xAA, 0xAB, 0x08, 0x01, 0x00, 0x05, 0x00, 0x04, 0x01, 0x03, 0x87, 0x83, 0x5D};
  Serial2.write(msg_15, sizeof(msg_15));
  delay(Delay_time);
  byte msg_16[]={0xAA, 0xAB, 0x08, 0x09, 0x00, 0x00, 0x60, 0x6D};
  Serial2.write(msg_16, sizeof(msg_16));
  delay(Delay_time);

}
